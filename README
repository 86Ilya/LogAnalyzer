   Предствляю вашему вниманию скрипт анализатор логов "log_analyzer.py".
Данный скрипт генерирует отчёт по самому свежему логу в папке.
Логика работы следующая: скрипт анализирует содержимое папки логов - ищет в ней логи формата
"nginx-access-ui.log-20170630" или "nginx-access-ui.log-20170630.gz" и при отсутствии отчёта по данному логу,
создаёт его.

Для запуска скрипта необходимо настроить конфиг файл. Пример конфига, с описанием полей, представлен ниже:

---- config.cfg ----
{
# Папка с готовыми отчётами
"REPORT_DIR": "./reports",
# Файл шаблон отчёта
"REPORT_TEMPLATE": "./report.html",
# Папка с вашими логами
"LOG_DIR": "./log",
# Уровень логирования. Поддерживаются следующие уровни: INFO, ERROR, DEBUG
"LOGLEVEL": "ERROR",
# Имя лог файла, куда анализатор будет писать информацию о своих действиях
"LOGFILE": "tmp.log",
# Под размером отчёта подразумевается количество ссылок(и статистики по ним), которые в него попадут.
"REPORT_SIZE": 1000,
# Максимально допустимое количество ошибок при обработке лога, в процентах,
"MAX_ERRORS_PERCENT": 1
}
---- config.cfg ----

Для указания конфига скрипту, при запуске следует воспользоваться параметром "--config", например так:
"./log_analyzer.py --config /root/myconfig.cfg", где "/root/myconfig.cfg" путь к вашему конфиг файлу.

При запуске скрипта без параметров, он анализирует содержимое папки "./log", в качестве шаблона берёт файл
 "./report.html", а результат работы складывает в "./reports". Все логи работы скрипта при этом выводятся на экран.

Для неуверенных в себе и слабых характером имеются предварительные юнит тесты.
Они находятся в папке "LogAnalyzer/log_analyzer/tests"
Для их запуска необходимо установить в виртуальное окружение пакет анализатора логов, выполнив из корня проекта команду
"python setup.py install"
и из папки содержащей тесты ввести ввести команду:
python test_log_analyzer.py
Результаты тестов будут выведены на экран.
